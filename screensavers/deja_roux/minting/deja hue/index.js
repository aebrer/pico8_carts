function setup(){isFxpreview?(ww=1080,wh=1080,is_mobile=!1,pd=5):(ww=windowWidth,wh=windowHeight),mycan=createCanvas(ww,wh),wth=PIX_WIDTH,window.$fxhashFeatures["Pixel Width"]=wth,hgt=Math.ceil(wth*(wh/ww)),hc=-wth,pg=createGraphics(wth,hgt),pg.colorMode(HSL),pg.pixelDensity(1),pg.loadPixels(),dd=displayDensity();let e=Math.ceil(dd*pd*.5);is_mobile&&(e/=3),pixelDensity(e),noSmooth(),pg.background(0),pg.strokeWeight(1);random_int(5,100);locking_method=randomChoice(ent_lock_methods),pixeldata=Array.from({length:wth},(e,t)=>Array.from({length:hgt},(e,o)=>({x:t,y:o,state:"unseen",colors:[],color:color(get_hsb(calt,0,0))}))),renew_pixels()}function draw(){"Random Chance"==locking_method?random_int(1,1e3)>400&&(fxrand=sfc32(...hashes)):"Consistent by Frame Count"==locking_method&&frameCount%5==0&&(fxrand=sfc32(...hashes)),pg.loadPixels();let e=get_all_pixels_by_state("waiting"),t=get_all_pixels_by_state("unseen");for(let o=0;o<PIX_BATCH_SIZE;o++)if(0===e.length&&t.length>0){let e=randomChoice(t);e.state="waiting",e.colors=get_possible_colors(e.color),random_pixels[o]=e}else random_pixels[o]=randomChoice(e);set_pixel_colors(random_pixels),get_all_pixels_by_state("settled").length===wth*hgt&&(loop_count+=1,renew_pixels()),pg.updatePixels(),image(pg,0,0,ww,wh,0,0,wth,hgt)}function windowResized(){setup()}function keyPressed(){"s"!=key&&"S"!=key||saveCanvas(mycan,"dejahue","png"),"f"!=key&&"F"!=key||fullscreen(!fullscreen()),"p"!=key&&"P"!=key||noLoop(),"r"!=key&&"R"!=key||setup(),"u"!=key&&"U"!=key||loop(),"b"!=key&&"B"!=key||(PIX_WIDTH=Math.floor(2*PIX_WIDTH),PIX_BATCH_SIZE=PIX_WIDTH,setup()),"n"!=key&&"N"!=key||(PIX_WIDTH=Math.floor(PIX_WIDTH/2),PIX_BATCH_SIZE=PIX_WIDTH,setup()),"c"!=key&&"C"!=key||(init_hue_limiter=random_int(0,360),setup())}function checkLoop(){this.checked()?loop():noLoop()}const random_num=(e,t)=>e+(t-e)*fxrand(),random_int=(e,t)=>Math.floor(random_num(e,t+1)),randomChoice=e=>e[Math.floor(random_num(0,1)*e.length)];let PIX_WIDTH=32;const MAX_CACHE_SIZE=1e4;let colorCache=new Array(MAX_CACHE_SIZE),PIX_BATCH_SIZE=Math.floor(PIX_WIDTH/2);const random_pixels=new Array(PIX_BATCH_SIZE),get_new_hashes=()=>{fxhash="oo"+Array(49).fill(0).map(e=>alphabet[Math.random()*alphabet.length|0]).join("");const e=e=>[...e].reduce((e,t)=>e*alphabet.length+alphabet.indexOf(t)|0,0),t=fxhash.slice(2),o=new RegExp(".{"+(t.length/4|0)+"}","g"),s=t.match(o).map(t=>e(t));return s},is_mobile=window.matchMedia("(any-hover: none)").matches;fxrand=sfc32(...hashes),window.$fxhashFeatures={};let pg,wth,hgt,hc,ww,wh,x,y,col,hues,dd,mycan,tx,c,calt,nostroke,locking_method,xdata,ydata,pixeldata,seed_freq,pd=5,initial_run=!0,loop_count=0;const ent_lock_methods=["Random Chance"];let init_hue_limiter=random_int(0,360),possible_hue_transforms=[0,0,1,1,-1,-1,2,-2,3,-3];const possible_saturation_transforms=[1,2,3,-1,-2,-3],possible_brightness_transforms=[1,2,3,5,-1,-2],neighbors=new Array(8),get_hsb=(e,t,o)=>`hsb(${e},${t}%,${o}%)`,get_all_pixels_by_state=e=>{const t=[];for(let o=0;o<wth;o++){const s=pixeldata[o];for(let o=0;o<s.length;o++)s[o].state===e&&t.push(s[o])}return t},get_possible_colors=e=>{const t=hue(e),o=saturation(e),s=brightness(e),n=`${t}-${o}-${s}`;if(colorCache[n])return colorCache[n];const a=[];for(let e=0;e<5;e++){let e=t+randomChoice(possible_hue_transforms);e<init_hue_limiter-69&&(e=init_hue_limiter-69),e>init_hue_limiter+69&&(e=init_hue_limiter+69),e<1&&(e=360+e),e>360&&(e-=360),e=Math.floor(e);const n=Math.floor(Math.max(69,Math.min(100,o+randomChoice(possible_saturation_transforms)))),h=Math.floor(Math.min(69,Math.max(98,s+randomChoice(possible_brightness_transforms)))),l=get_hsb(e,n,h),r=color(l);a.push(r)}if(Object.keys(colorCache).length>=MAX_CACHE_SIZE){const e=Object.keys(colorCache)[0];delete colorCache[e]}return colorCache[n]=a,a},set_pixel_colors=e=>{e.forEach(e=>{if("Random Chance"==locking_method&&random_int(1,1e3)>500&&(fxrand=sfc32(...hashes)),"settled"===e.state)return;let t=color(get_hsb(randomChoice(hues),random_int(75,100),random_int(75,100)));if("unseen"!==e.state&&e.colors.length>0&&(t=randomChoice(e.colors)),brightness(t)>99)return void(e.state="settled");let o=e.x,s=e.y;pixeldata[o][s].color=t,pixeldata[o][s].state="settled";const n=4*(o+s*wth);pg.pixels[n]=red(t),pg.pixels[n+1]=green(t),pg.pixels[n+2]=blue(t),pg.pixels[n+3]=alpha(t);const a=[[(o-1+wth)%wth,s],[(o+1+wth)%wth,s],[o,(s-1+hgt)%hgt],[o,(s+1+hgt)%hgt],[(o+1+wth)%wth,(s+1+hgt)%hgt],[(o-1+wth)%wth,(s-1+hgt)%hgt],[(o+1+wth)%wth,(s-1+hgt)%hgt],[(o-1+wth)%wth,(s+1+hgt)%hgt]];a.forEach(([e,o])=>{"settled"!=pixeldata[e][o].state&&(pixeldata[e][o].colors.push(...get_possible_colors(t)),pixeldata[e][o].state="waiting")})})},renew_pixels=()=>{if(hashes=get_new_hashes(),fxrand=sfc32(...hashes),locking_method=randomChoice(ent_lock_methods),hues=Array.from({length:1},()=>random_int(0,360)),loop_count>0){const e=get_all_pixels_by_state("settled"),t=randomChoice(e);for(;brightness(t.color)<1;)t=randomChoice(e);const o=get_possible_colors(t.color);for(let e=0;e<o.length;e++){const t=o[e];hues[e]=hue(t)}}pixeldata.forEach(e=>e.forEach(e=>{e.state="unseen",e.colors=[]})),colorCache=new Array(MAX_CACHE_SIZE)};